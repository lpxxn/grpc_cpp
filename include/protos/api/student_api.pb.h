// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/api/student_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fapi_2fstudent_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fapi_2fstudent_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protos/common.pb.h"
#include "protos/model/students.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fapi_2fstudent_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fapi_2fstudent_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fapi_2fstudent_5fapi_2eproto;
namespace api {
class QueryStudent;
class QueryStudentDefaultTypeInternal;
extern QueryStudentDefaultTypeInternal _QueryStudent_default_instance_;
class QueryStudentResponse;
class QueryStudentResponseDefaultTypeInternal;
extern QueryStudentResponseDefaultTypeInternal _QueryStudentResponse_default_instance_;
}  // namespace api
PROTOBUF_NAMESPACE_OPEN
template<> ::api::QueryStudent* Arena::CreateMaybeMessage<::api::QueryStudent>(Arena*);
template<> ::api::QueryStudentResponse* Arena::CreateMaybeMessage<::api::QueryStudentResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace api {

// ===================================================================

class QueryStudent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.QueryStudent) */ {
 public:
  inline QueryStudent() : QueryStudent(nullptr) {}
  virtual ~QueryStudent();

  QueryStudent(const QueryStudent& from);
  QueryStudent(QueryStudent&& from) noexcept
    : QueryStudent() {
    *this = ::std::move(from);
  }

  inline QueryStudent& operator=(const QueryStudent& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryStudent& operator=(QueryStudent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryStudent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryStudent* internal_default_instance() {
    return reinterpret_cast<const QueryStudent*>(
               &_QueryStudent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryStudent& a, QueryStudent& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryStudent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryStudent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryStudent* New() const final {
    return CreateMaybeMessage<QueryStudent>(nullptr);
  }

  QueryStudent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryStudent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryStudent& from);
  void MergeFrom(const QueryStudent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryStudent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.QueryStudent";
  }
  protected:
  explicit QueryStudent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fapi_2fstudent_5fapi_2eproto);
    return ::descriptor_table_protos_2fapi_2fstudent_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:api.QueryStudent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fapi_2fstudent_5fapi_2eproto;
};
// -------------------------------------------------------------------

class QueryStudentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.QueryStudentResponse) */ {
 public:
  inline QueryStudentResponse() : QueryStudentResponse(nullptr) {}
  virtual ~QueryStudentResponse();

  QueryStudentResponse(const QueryStudentResponse& from);
  QueryStudentResponse(QueryStudentResponse&& from) noexcept
    : QueryStudentResponse() {
    *this = ::std::move(from);
  }

  inline QueryStudentResponse& operator=(const QueryStudentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryStudentResponse& operator=(QueryStudentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryStudentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryStudentResponse* internal_default_instance() {
    return reinterpret_cast<const QueryStudentResponse*>(
               &_QueryStudentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryStudentResponse& a, QueryStudentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryStudentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryStudentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryStudentResponse* New() const final {
    return CreateMaybeMessage<QueryStudentResponse>(nullptr);
  }

  QueryStudentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryStudentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryStudentResponse& from);
  void MergeFrom(const QueryStudentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryStudentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.QueryStudentResponse";
  }
  protected:
  explicit QueryStudentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fapi_2fstudent_5fapi_2eproto);
    return ::descriptor_table_protos_2fapi_2fstudent_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStudentListFieldNumber = 1,
  };
  // repeated .model.Student studentList = 1;
  int studentlist_size() const;
  private:
  int _internal_studentlist_size() const;
  public:
  void clear_studentlist();
  ::model::Student* mutable_studentlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::model::Student >*
      mutable_studentlist();
  private:
  const ::model::Student& _internal_studentlist(int index) const;
  ::model::Student* _internal_add_studentlist();
  public:
  const ::model::Student& studentlist(int index) const;
  ::model::Student* add_studentlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::model::Student >&
      studentlist() const;

  // @@protoc_insertion_point(class_scope:api.QueryStudentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::model::Student > studentlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fapi_2fstudent_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QueryStudent

// int64 id = 1;
inline void QueryStudent::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryStudent::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryStudent::id() const {
  // @@protoc_insertion_point(field_get:api.QueryStudent.id)
  return _internal_id();
}
inline void QueryStudent::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void QueryStudent::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api.QueryStudent.id)
}

// -------------------------------------------------------------------

// QueryStudentResponse

// repeated .model.Student studentList = 1;
inline int QueryStudentResponse::_internal_studentlist_size() const {
  return studentlist_.size();
}
inline int QueryStudentResponse::studentlist_size() const {
  return _internal_studentlist_size();
}
inline ::model::Student* QueryStudentResponse::mutable_studentlist(int index) {
  // @@protoc_insertion_point(field_mutable:api.QueryStudentResponse.studentList)
  return studentlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::model::Student >*
QueryStudentResponse::mutable_studentlist() {
  // @@protoc_insertion_point(field_mutable_list:api.QueryStudentResponse.studentList)
  return &studentlist_;
}
inline const ::model::Student& QueryStudentResponse::_internal_studentlist(int index) const {
  return studentlist_.Get(index);
}
inline const ::model::Student& QueryStudentResponse::studentlist(int index) const {
  // @@protoc_insertion_point(field_get:api.QueryStudentResponse.studentList)
  return _internal_studentlist(index);
}
inline ::model::Student* QueryStudentResponse::_internal_add_studentlist() {
  return studentlist_.Add();
}
inline ::model::Student* QueryStudentResponse::add_studentlist() {
  // @@protoc_insertion_point(field_add:api.QueryStudentResponse.studentList)
  return _internal_add_studentlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::model::Student >&
QueryStudentResponse::studentlist() const {
  // @@protoc_insertion_point(field_list:api.QueryStudentResponse.studentList)
  return studentlist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fapi_2fstudent_5fapi_2eproto
